CREATE TABLE IF NOT EXISTS orders (
    id VARCHAR(36) PRIMARY KEY,
    type VARCHAR(24) AS ua.crypto.data.models.Order.Type NOT NULL,
    quantity DOUBLE PRECISION NOT NULL,
    executed_quantity DOUBLE PRECISION NOT NULL,
    cumulative_quote_qty DOUBLE PRECISION NOT NULL,
    cost DOUBLE PRECISION NOT NULL,
    side VARCHAR(6) AS ua.crypto.data.models.Order.Side NOT NULL,
    pair VARCHAR(13) NOT NULL,
    price DOUBLE PRECISION NOT NULL,
    status VARCHAR(12) NOT NULL,
    created_at TIMESTAMPTZ AS kotlinx.datetime.Instant NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ AS kotlinx.datetime.Instant NOT NULL DEFAULT CURRENT_TIMESTAMP,
    cancel BOOLEAN NOT NULL DEFAULT FALSE
);

-- queries

getAll:
SELECT * FROM orders;

getForSide:
SELECT * FROM orders
WHERE side = :side;

getForCancel:
SELECT * FROM orders
WHERE cancel = TRUE;

deleteInIds:
DELETE FROM orders
WHERE id IN :ids;

deleteNotInIds:
DELETE FROM orders
WHERE id NOT IN :ids;

save:
INSERT INTO orders (
    id,
    type,
    quantity,
    executed_quantity,
    cumulative_quote_qty,
    cost,
    side,
    pair,
    price,
    status,
    created_at,
    updated_at
) VALUES (
    :id,
    :type,
    :quantity,
    :executedQuantity,
    :cumulativeQuoteQty,
    :cost,
    :side,
    :pair,
    :price,
    :status,
    :createdAt,
    :updatedAt
)
ON CONFLICT(id) DO UPDATE SET
    type = excluded.type,
    quantity = excluded.quantity,
    executed_quantity = excluded.executed_quantity,
    cumulative_quote_qty = excluded.cumulative_quote_qty,
    cost = excluded.cost,
    side = excluded.side,
    pair = excluded.pair,
    price = excluded.price,
    status = excluded.status,
    created_at = excluded.created_at,
    updated_at = excluded.updated_at;
